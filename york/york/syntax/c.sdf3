module c

imports lex
imports path
imports core 

sorts CType CField
context-free syntax
  CType.VoidT     = <void>
  CType.IntT      = <int>
  CType.FloatT    = <float>
  CType.NullT     = <null>
  CType.PointerT  = <*<CType>>
  CType.FunctionT = <(<{CType ", "}*>)<CType>>
  CType.TypeName  = Path
  
  CType.StructT   = <
    struct {
      <{CField "\n"}*>
    }
  >
  CField.CField = <<CType> <ID>;>

sorts CExpr CInitField
context-free syntax
  CExpr         = <(<CExpr>)> {bracket}
  CExpr.CInt    = INT
  CExpr.CFloat  = FLOAT
  CExpr.CNull   = <null>
  CExpr.CVar    = Path
  CExpr.CApply  = <<CExpr>(<{CExpr ", "}*>)>
  CExpr.CAssign = <<CExpr> = <CExpr>> {non-assoc}
  CExpr.CUnOp   = <<CUnOp><CExpr>>
  CExpr.CBinOp  = <<CExpr> <CBinOp> <CExpr>> {left}
  CExpr.CCast   = <(<CType>) <CExpr>> 
  CExpr.CDot    = [[CExpr]->[ID]]
  CExpr.CInitS  = <
    <CType>{
      <{CInitField "\n"}*>
    }
  >  
  CInitField.CInitField = <<ID> = <CExpr>;>
context-free priorities
  CExpr.CApply 
  > CExpr.CDot
  > CExpr.CUnOp
  > CExpr.CBinOp
  > CExpr.CAssign
  
sorts CUnOp CBinOp
context-free syntax
  CUnOp.CNot   = <!>
  CUnOp.CDeRef = <*>
  
  CBinOp.CAdd = <+>
  CBinOp.CMul = <*>
  CBinOp.CSub = [-]
  CBinOp.CEq  = [==]
  
sorts CStat
context-free syntax
  CStat.CExpr = <<CExpr>;>
  CStat.CIf = <
    if(<CExpr>)
      <CStat>
    else
      <CStat>
  >
  CStat.CFor = <
    for(<CExpr>; <CExpr>; <CExpr>)
      <CStat>
  >
  CStat.CReturn = <return <CExpr>;>
  CStat.CBlock = <
    {
      <{CDecl "\n"}*>
      <{CStat "\n"}*>
    }
  >
  
sorts CDecl CArg
context-free syntax
  CDecl.CDecl = <<CType> <ID>;>
  CArg.CArg = <<CType> <ID>>
  
context-free syntax
  Term.CVarDecl = <<CExpr>>
  Term.CFunDef = <
    (<{CArg ", "}*>) <CType> {
      <{CDecl "\n"}*>
      <{CStat "\n"}*>
    } 
  >
  DefType.CDefType = CType
  ValType.CValType = CType
  
template options
  ID = keyword {reject}
  