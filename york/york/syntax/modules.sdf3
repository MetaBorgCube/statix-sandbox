module modules

imports lex
imports path
imports base
imports core


sorts ModType  
context-free syntax

  ModType.PathType = <<Path>>
  
  ModType.Sig = <
    sig
      <{Spec "\n"}*>
    end
  >
  
  ModType.FunctorType = <
    functor(<ID> : <ModType>)
      <ModType>
  >
  
sorts Spec
context-free syntax

  Spec.ValSig = <
    val <ID> : <ValType>
  >
   
  Spec.AbsTypeSig = <
    type <ID>
  >
  
  Spec.TypeSig = <
    type <ID> = <DefType>
  >
  
  Spec.ModSig = <
    module <ID> : 
      <ModType>
  >
  
sorts ModTerm
context-free syntax

  ModTerm.LongIdent = Path
  
  ModTerm.Struct = <
    struct 
      <{Def "\n"}*>
    end
  >
  
  ModTerm.Functor = <
    functor(<ID> : <ModType>)
      <ModTerm>
  >
  
  ModTerm.Apply = <
    <ModTerm>(<ModTerm>)
  >
  
  ModTerm.Constraint = <
    (<ModTerm> : <ModType>)
  >
  
  ModTerm = <(<ModTerm>)> {bracket}
  
context-free priorities
  ModTerm.Apply 
  > ModTerm.Functor

sorts Def
context-free syntax
  
  Def.ValueStr = <
    let <ID> = <Term>
  >
  
  Def.TypeKindStr = <
    type <ID> :: <Kind> = <DefType>
  >
  Def.TypeStr = <
    type <ID> = <DefType>
  >
  
  Def.ModuleStr = <
    module <ID> = 
      <ModTerm>
  >
  
template options
  ID = keyword {reject}