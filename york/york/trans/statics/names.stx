module statics/names

imports signatures/lex-sig
imports statics/base

signature
  name-resolution
    labels P
  relations 
    var : ID -> scope 
 
rules

  declareID : scope * ID * scope
  resolveID : scope * ID -> list((path * (ID * scope)))
  scopeOfID : scope * ID -> scope
  typeOfID  : scope * ID -> TYPE

  declareID(s, x, s2) :- 
    !var[x, s2] in s,
    resolveID(s, x) == [(_, (_, _))] 
      | error $[Duplicate definition of variable [x]],
    @x.scope := s2. 
    
  resolveID(s, x) = ps :-  
    query var
      filter P*
         and { x' :- x' == x }
         min $ < P
         and true
          in s |-> ps.  
          
  scopeOfID(s, x) = s2 :- {x'} 
    resolveID(s, x) == [(_,(x', s2))|_]
      | error $[Variable [x] not defined],
    @x.ref := x'. 
    
  typeOfID(s, x) = typeOf(scopeOfID(s, x)).
    

   
signature
  relations 
    typeOf : -> TYPE
rules

  typeOf : scope -> TYPE
  withType : TYPE -> scope
  
  typeOf(s) = T :-
    query typeOf
      filter e and true
      min /* */ and true
      in s |-> [(_, T)].
      
  withType(T) = s :-
    new s, !typeOf[T] in s.