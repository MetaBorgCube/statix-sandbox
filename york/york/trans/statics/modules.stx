module statics/modules

imports statics/base
imports statics/names
imports statics/path

imports statics/module-types
imports statics/core-sig
imports statics/c
      
imports signatures/modules-sig

rules

  specOk : scope * Spec -> scope

  specOk(s1, ValSig(x, t)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfValType(s1, t) == T, 
    declareID(s2, x, withType(T)).
  
  specOk(s1, TypeSig(x, td)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfDefType(s2, td) == T,
    declareID(s2, x, withType(T)).
  
  specOk(s1, AbsTypeSig(x)) = s2 :- 
    new s2, s2 -S-> s1,
    declareID(s2, x, withType(ABS(x))).
    
  specOk(s1, ModSig(x, mt)) = s2 :- {MT}
    new s2, s2 -S-> s1,
    typeOfModType(s1, mt) == MT,
    declareID(s2, x, withType(MT)).
    
  specsOk : scope * list(Spec) -> scope
  
  specsOk(s, []) = s.
  
  specsOk(s1, [spec | specs]) = 
    specsOk(specOk(s1, spec), specs).
  
rules 

  typeOfModType : scope * ModType -> TYPE
  
  typeOfModType(s, PathType(p)) = 
    typeOfPath(s, p).

  typeOfModType(s, Sig(specs)) = SIG(specsOk(s, specs)). 
    // problem: s reachable from s_sig
  
  typeOfModType(s1, FunctorType(x, mt1, mt2)) = FUNCTOR(x, T1, T2) :- {s2}
    new s2, s2 -P-> s1,
    typeOfModType(s1, mt1) == T1,
    declareID(s2, x, withType(T1)),
    typeOfModType(s2, mt2) == T2.
  
  // it is an error to project on a functor?
  
rules 

  typeOfModTerm : scope * ModTerm -> TYPE
  
  typeOfModTerm(s, LongIdent(p)) = typeOfPath(s, p).
  
  typeOfModTerm(s, Struct(defs)) = SIG(s_sig) :-
    defsOk(s, defs) == s_sig.
  
  typeOfModTerm(s1, Functor(x, mt1, mtrm)) = FUNCTOR(x, T1, T2) :- {s2}
    new s2, s2 -P-> s1,
    typeOfModType(s1, mt1) == T1,
    declareID(s2, x, withType(T1)),
    typeOfModTerm(s2, mtrm) == T2.
  
  typeOfModTerm(s, Apply(mtrm1, mtrm2)) = T3 :- {x T1 T2}
    typeOfModTerm(s, mtrm1) == T1@FUNCTOR(_, _, _),
    typeOfModTerm(s, mtrm2) == T2, 
    applyType(T1, T2) == T3.
  
  typeOfModTerm(s, Constraint(mtrm, mt)) = T2 :- {T1}
    typeOfModTerm(s, mtrm) == T1,
    typeOfModType(s, mt) == T2.
    // TODO: check compatability
  
rules

  defOk : scope * Def -> scope
  
  defOk(s1, ValueStr(x, e)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfTerm(s1, e) == T,
    declareID(s2, x, withType(T)).
    
  defOk(s1, TypeKindStr(x, k, deft)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfDefType(s1, deft) == T,
    declareID(s2, x, withType(T)).
  
  defOk(s1, TypeStr(x, deft)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfDefType(s2, deft) == T,
    declareID(s2, x, withType(T)).
  
  defOk(s1, ModuleStr(x, mtrm)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfModTerm(s1, mtrm) == T,
    declareID(s2, x, withType(T)).
  
  defOk(s1, ModuleTypedStr(x, mt, mtrm)) = s2 :- {T1 T2}
    new s2, s2 -S-> s1,
    typeOfModType(s1, mt) == T1,
    typeOfModTerm(s1, mtrm) == T2,
    subtypeO(x, T2, T1),
    declareID(s2, x, withType(T1)).
  
  defsOk : scope * list(Def) -> scope
  
  defsOk(s, []) = s.
  
  defsOk(s1, [def | defs]) = s3 :- {s2}
    defOk(s1, def) == s2,
    defsOk(s2, defs) == s3.
  
  
  
  