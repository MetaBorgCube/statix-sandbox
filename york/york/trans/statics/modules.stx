module statics/modules

imports signatures/modules-sig
imports statics/base
imports statics/core-sig
imports statics/names
imports statics/path
imports statics/c

signature
  constructors
    SIG     : scope -> TYPE
    FUNCTOR : ID * TYPE * TYPE -> TYPE
    ABS     : ID -> TYPE
    
rules

  applyType : TYPE * TYPE -> TYPE 
  
  applyType(FUNCTOR(x, T1, T2), T3) = T4 :- {s_subs}
    new s_subs,
    subtypeO(x, T3, T1),
    declarePhantomID(s_subs, x, withType(T3)),
    subs(s_subs, T2) == T4.
  
rules // substitution

  subs(subs, SIG(s_sig1)) = SIG(s_sig2) :- {ps}
    idsInScope(s_sig1) == ps,
    new s_sig2,
    subsInPaths(subs, s_sig2, ps). 
    
  subs(subs, FUNCTOR(x, T1, T2)) = 
    FUNCTOR(x, subs(subs, T1), subs(subs, T2)).
    
  subs(subs, ABS(x)) = subsAux(resolveID(subs, x), ABS(x)).
  
  subsAux : list((path * (ID * scope))) * TYPE -> TYPE
  
  subsAux([], T) = T.
  
  subsAux([(_, (_, s))], _) = typeOf(s).
 
rules
  
  subtypeO(x, SIG(s1), SIG(s2)) :- 
    allDefinedIn(idsInScope(s2), x, s1).
    
  subtypeO(y, FUNCTOR(x, T1, T2), FUNCTOR(y, S1, S2)) :- 
    subtypeO(y, S1, T1),
    subtypeO(y, T2, S2).
    
  subtypeO(x, ABS(y), ABS(y)).
  subtypeO(x, CINT(), ABS(y)).
  subtypeO(x, CFLOAT(), ABS(y)).
  subtypeO(x, CNULL(), ABS(y)).
  subtypeO(x, CPOINTER(T), ABS(y)).
  subtypeO(x, CSTRUCT(T), ABS(y)).
  subtypeO(x, CFUNCTION(Ts, T), ABS(y)).
  
//  subtype(ABS(x), ABS(y)).
//  subtype(CINT(), ABS(x)).
//  subtype(CPOINTER(T), ABS(x)).
  
      
rules

  specOk : scope * Spec -> scope

  specOk(s1, ValSig(x, t)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfValType(s1, t) == T, 
    declareID(s2, x, withType(T)).
  
  specOk(s1, TypeSig(x, td)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfDefType(s2, td) == T,
    declareID(s2, x, withType(T)).
  
  specOk(s1, AbsTypeSig(x)) = s2 :- 
    new s2, s2 -S-> s1,
    declareID(s2, x, withType(ABS(x))).
    
  specOk(s1, ModSig(x, mt)) = s2 :- {MT}
    new s2, s2 -S-> s1,
    typeOfModType(s1, mt) == MT,
    declareID(s2, x, withType(MT)).
    
  specsOk : scope * list(Spec) -> scope
  
  specsOk(s, []) = s.
  
  specsOk(s1, [spec | specs]) = 
    specsOk(specOk(s1, spec), specs).
  
rules 

  typeOfModType : scope * ModType -> TYPE
  
  typeOfModType(s, PathType(p)) = 
    typeOfPath(s, p).

  typeOfModType(s, Sig(specs)) = SIG(specsOk(s, specs)). 
    // problem: s reachable from s_sig
  
  typeOfModType(s1, FunctorType(x, mt1, mt2)) = FUNCTOR(x, T1, T2) :- {s2}
    new s2, s2 -P-> s1,
    typeOfModType(s1, mt1) == T1,
    declareID(s2, x, withType(T1)),
    typeOfModType(s2, mt2) == T2.
  
  proj(SIG(s), x) = typeOfID(s, x).
  
  // it is an error to project on a functor?
  
rules 

  typeOfModTerm : scope * ModTerm -> TYPE
  
  typeOfModTerm(s, LongIdent(p)) = typeOfPath(s, p).
  
  typeOfModTerm(s, Struct(defs)) = SIG(s_sig) :-
    defsOk(s, defs) == s_sig.
  
  typeOfModTerm(s1, Functor(x, mt1, mtrm)) = FUNCTOR(x, T1, T2) :- {s2}
    new s2, s2 -P-> s1,
    typeOfModType(s1, mt1) == T1,
    declareID(s2, x, withType(T1)),
    typeOfModTerm(s2, mtrm) == T2.
  
  typeOfModTerm(s, Apply(mtrm1, mtrm2)) = T3 :- {x T1 T2}
    typeOfModTerm(s, mtrm1) == T1@FUNCTOR(_, _, _),
    typeOfModTerm(s, mtrm2) == T2, 
    applyType(T1, T2) == T3.
  
  typeOfModTerm(s, Constraint(mtrm, mt)) = T2 :- {T1}
    typeOfModTerm(s, mtrm) == T1,
    typeOfModType(s, mt) == T2.
    // TODO: check compatability
  
rules

  defOk : scope * Def -> scope
  
  defOk(s1, ValueStr(x, e)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfTerm(s1, e) == T,
    declareID(s2, x, withType(T)).
    
  defOk(s1, TypeKindStr(x, k, deft)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfDefType(s1, deft) == T,
    declareID(s2, x, withType(T)).
  
  defOk(s1, TypeStr(x, deft)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfDefType(s2, deft) == T,
    declareID(s2, x, withType(T)).
  
  defOk(s1, ModuleStr(x, mtrm)) = s2 :- {T}
    new s2, s2 -S-> s1,
    typeOfModTerm(s1, mtrm) == T,
    declareID(s2, x, withType(T)).
  
  defOk(s1, ModuleTypedStr(x, mt, mtrm)) = s2 :- {T1 T2}
    new s2, s2 -S-> s1,
    typeOfModType(s1, mt) == T1,
    typeOfModTerm(s1, mtrm) == T2,
    subtypeO(x, T2, T1),
    declareID(s2, x, withType(T1)).
  
  defsOk : scope * list(Def) -> scope
  
  defsOk(s, []) = s.
  
  defsOk(s1, [def | defs]) = s3 :- {s2}
    defOk(s1, def) == s2,
    defsOk(s2, defs) == s3.
  
  
  
  