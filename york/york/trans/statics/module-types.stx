module statics/module-types 

// semantic module types

imports statics/base
imports statics/names
imports statics/path
//imports statics/c-types

//imports signatures/modules-sig
//imports statics/core-sig
//imports statics/path
//imports statics/c

signature
  sorts KIND
  constructors
    SIG     : scope -> TYPE
    FUNCTOR : ID * TYPE * TYPE -> TYPE

    TYPEDEC : ID * KIND -> TYPE
    
    ABS     : KIND
    ALIAS   : TYPE -> KIND
//    NOMINAL : scope -> KIND // TODO: make C structs nominal
    
rules

  proj(SIG(s), x) = typeOfID(s, x).
    
  // is it an error to project on a functor? indeed says Gabriel
  
rules

  applyType : TYPE * TYPE -> TYPE 
  
  applyType(FUNCTOR(x, T1, T2), T3@PATHTYPE(p, T3')) = T4 :- {s_subs}
    new s_subs,
    subtypeO(x, T3, T1),
    declarePhantomID(s_subs, x, withType(T3)),
    subs(s_subs, T2) == T4. 
  
rules // substitution

  subs(subs, SIG(s_sig1)) = SIG(s_sig2) :- {ps}
    idsInScope(s_sig1) == ps,
    new s_sig2,
    subsInPaths(subs, s_sig2, ps). 
    
  subs(subs, FUNCTOR(x, T1, T2)) = 
    FUNCTOR(x, subs(subs, T1), subs(subs, T2)).
    
  subs(subs, ABS(x)) = subsAux(resolveID(subs, x), ABS(x)).
  
  subsAux : list((path * (ID * scope))) * TYPE -> TYPE
  
  subsAux([], T) = T.
  
  subsAux([(_, (_, s))], _) = typeOf(s).
  
rules

  subtypeO(x, SIG(s_sig), SIG(s_sig)). 
  
  subtypeO(x, SIG(s_sig1), SIG(s_sig2)) :- 
    s_sig1 != s_sig2,
    allDefinedIn(idsInScope(s_sig2), x, s_sig1).
    
  subtypeO(y, FUNCTOR(x, T1, T2), FUNCTOR(z, S1, S2)) :- 
    subtypeO(y, S1, T1),
    subtypeO(y, T2, S2).
    
  subtypeO(x, ABS(y), ABS(y)).
  
