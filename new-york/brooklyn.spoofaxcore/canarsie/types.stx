module canarsie/types

imports
  canarsie/resolution

signature

  // SQL data types
  sorts TYPE constructors
    INT 	: TYPE
    VARCHAR	: int -> TYPE
    DATE 	: TYPE
    TABLE   : scope -> TYPE
    RESULT	: scope -> TYPE
    // On a table with a foreign key constraint
    // Store column type and referenced type
    FK		: TYPE * TYPE -> TYPE

  sorts CNULL constructors // nullability constraint
    CNULL    : CNULL
    CNOTNULL : CNULL

  relations
    var : string -> scope
    nullable: 

rules // table declarations

  declareTable : scope * scope * string * list((string * TYPE * CNULL))

  declareTable(s, s_table, n, T_cols) :-
    s_table -P-> s,
    !type[n, withType(TABLE(s_table))] in s,
    declareCols(s_table, T_cols),
    query type
      filter P* 
         and { n' :- n' == n }
         min $ < P
          in s |-> [(_, (_, _))]
    | error $[Multiple tables with name [n]].

  resolveTable : scope * string -> TYPE

  resolveTable(s, n) = typeOf(s_t) :-
    query type
      filter P*
         and { n' :- n' == n }
         min $ < P
          in s |-> [(_, (_, s_t))|_]
      | error $[Table [n] not created].

rules // column declarations

  declareCols maps declareCol(*, list(*))
  declareCol : scope * (string * TYPE * CNULL)
  copyCols maps copyCol(*, list(*))
  copyCol : scope * (string * scope)
  removeFK: TYPE -> TYPE

  declareCol(s, (n, T, null)) :-
    !var[n, withTypeAndNullable(T, null)] in s,
    query var
      filter P*
         and { n' :- n' == n }
         min $ < P
         and false
          in s |-> [_]
    | error $[Multiple columns with name [n]].

  copyCol(s, (n, T)) :- {T' null}
    removeFK(typeOf(T)) == T',
    nullability(T) == null,
    !var[n, withTypeAndNullable(T', null)] in s,
    query var
      filter P*
         and { n' :- n' == n }
         min $ < P
         and false
          in s |-> [_]
    | error $[Multiple columns with name [n]].

  removeFK(T) = T.
  removeFK(FK(T, _)) = removeFK(T).

  resolveCol: scope * string -> scope
  resolveCol(s, n) = s_t :-
    query var
      filter P* N*
         and { n' :- n' == n }
         min $ < P, N < P, $ < N
         and false
          in s |-> [(_, (_, s_t)) | _]
    | error $[No column with name [n]].
    
  // Non-permissive lookup
  // Needed for selects on joined tables
  resolveColNP: scope * string -> scope
  resolveColNP(s, n) = s_t :-
    query var
      filter N*
          and { n' :- n' == n }
          min $ < N
          and false
          in s |-> [(_, (_, s_t))]
    | error $[No unique column with name [n]].

rules

  visibleColumns: scope -> list((string * scope))
  stripColPaths maps stripColPath(list(*)) = list(*)
  stripColPath: (path * (string * scope)) -> (string * scope)

  visibleColumns(s) = stripColPaths(r) :-
    query var
      filter N*
         in s |-> r.

  stripColPath((p, T)) = T.

rules

  nullability: scope -> CNULL
  
  nullability(s) = disambNullable(R) :-
    query nullable
       filter e
           in s |-> R. 

  disambNullable: list((path * ())) -> CNULL
  
  disambNullable([]) = CNOTNULL().
  disambNullable([_|_]) = CNULL().
