module selects

imports statements brooklyn-lex columns table values

context-free sorts 
  SelectSpec
  ColSpec
  TableSpec
  Condition
  WhereClause
  Select
 
context-free syntax

  Select.Select = <SELECT <SelectSpec> FROM <TableSpec>
  	  <WhereClause?>
  > {case-insensitive}
  
  SelectSpec.Wld = "*"
  SelectSpec.Cols = <<{ColSpec ", "}+>>
  
  ColSpec.Ref = ColumnRef
  ColSpec.CAlias = <<ColumnRef> AS <ID>> {case-insensitive}
  
  TableSpec.Table = TableRef
  TableSpec.TAlias = <<TableRef> AS <ID>> {case-insensitive}
  TableSpec.Join  = <<TableSpec> JOIN <TableSpec> ON <Condition>> {left, case-insensitive}
  
  Condition.And			= <<Condition> AND <Condition>> {right, case-insensitive}
  Condition.Or			= <<Condition> OR <Condition>>  {right, case-insensitive}
  Condition				= <(<Condition>)>				{bracket}
  
  Condition.Equal 		= <<Value> = <Value>>
  Condition.NotEqual 	= [[Value] <> [Value]]
  Condition.Gt		 	= [[Value] > [Value]]
  Condition.Lt		 	= [[Value] < [Value]]
  Condition.Null  		= <<Value> IS NULL> {case-insensitive}
  Condition.NotNull  	= <<Value> IS NOT NULL> {case-insensitive}
  
  Value.Column 			= ColumnRef

  WhereClause.Where 	= <WHERE <Condition>> {case-insensitive}

context-free priorities

  Condition.And >
  Condition.Or

template options

  tokenize: "<>();"

  ID = keyword {reject}
  keyword -/- [a-zA-Z0-9]
  