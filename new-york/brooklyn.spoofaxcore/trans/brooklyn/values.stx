module brooklyn/values

imports 
  signatures/values-sig

  canarsie/resolution
  canarsie/types
  
  brooklyn/datatypes

signature
  
  relations
    var: ID -> TYPE

rules

  typeOfValue: scope * Value -> scope
  
  typeOfValue(_, IntLit(_)) = T :-
    withTypeAndNullable(INT(), CNULL()) == T.
    
  typeOfValue(_, StringLit(_)) = T :-
    withTypeAndNullable(VARCHAR(0), CNULL()) == T.
    
  typeOfValue(s, Var(n)) = T :- {Tvar}
    resolveVar(s, n) == Tvar,
    withTypeAndNullable(Tvar, CNULL()) == T.
  
  typeOfValue(s, Convert(t, v)) = T :- {Td Tv}
  	withTypeAndNullable(Td, CNULL()) == T,
    typeOfDataType(t) == Td,
    typeOf(typeOfValue(s, v)) == Tv,
    try { Td != Tv }
    | warning $[Input and target type are equal, no conversion needed].

rules

  declareVar: scope * ID * TYPE
  declareVar(s, n, T) :-
    !var[n, T] in s,
    query var
      filter e
         and { n' :- n' == n }
          in s |-> [_]
      | error $[Variable [n] declared multiple times].


  resolveVar: scope * ID -> TYPE
  resolveVar(s, n) = T :-
    query var
      filter P*
         and {n' :- n' == n }
          in s |-> [(_, (_, T))|_].
    