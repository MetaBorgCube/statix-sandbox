module statics/let

imports canarsie/resolution
imports statics/base 
imports statics/variable
imports signatures/let-sig
imports statics/variable

signature
  constructors
    Let : ID * Exp * Exp -> Exp
    
rules

  typeOfExp(s, Let(x, e1, e2)) = T :- 
   {S s_let}
     typeOfExp(s, e1) == S,
     new s_let, s_let -P-> s,
     declareVar(s_let, x, S),
     typeOfExp(s_let, e2) == T.
   
  typeOfExp(s, LetSeq(binds, e)) = T :- {s_let}
    new s_let,
    sbindsOk(s, s_let, binds),
    typeOfExp(s_let, e) == T.
    
  typeOfExp(s, LetRec(binds, e)) = T :- {s_let}
    new s_let, s_let -P-> s,
    bindsOk(s_let, s_let, binds),
    typeOfExp(s_let, e) == T.
    
  typeOfExp(s, LetPar(binds, e)) = T :- {s_let}
    new s_let, s_let -P-> s,
    bindsOk(s_let, s, binds),
    typeOfExp(s_let, e) == T.
   
    
rules  

  sbindsOk : scope * scope * list(Bind)
  
  sbindsOk(s, s_fin, []) :-
    s_fin -P-> s.
    
  sbindsOk(s, s_fin, [bind | binds]) :- {s_mid}
    new s_mid, s_mid -P-> s,
    bindOk(s_mid, s, bind),
    sbindsOk(s_mid, s_fin, binds).