module canarsie/types

imports
  canarsie/resolution

signature

  // SQL data types
  sorts TYPE constructors
    SINT 	: TYPE
    VARCHAR	: int -> TYPE
    DATE 	: TYPE
    TABLE   : scope -> TYPE

  sorts CNULL constructors // nullability constraint
    CNULL    : CNULL
    CNOTNULL : CNULL

  sorts COL constructors
    COL : TYPE * CNULL -> COL

  relations
    table 	: occurrence -> scope
    col   	: occurrence -> COL

  namespaces
    Table 	: string
    Col	  	: string

  name-resolution
    resolve Table
      filter P* A*
      min $ < P,
          $ < A

    resolve Col
      filter P*

rules

rules // table declarations

  declareTable : scope * scope * string * list((string * COL))

  declareTable(s, s_table, n, T_cols) :-
    s_table -P-> s,
    !type[n, withType(TABLE(s_table))] in s,
    declareCols(s_table, T_cols),
    query type
      filter P*
         and { n' :- n' == n }
         min $ < P
          in s |-> [(_, (_, _))]
    | error $[Multiple tables with name [n]].

  resolveTable : scope * string -> TYPE

  resolveTable(s, n) = typeOf(s_t) :- {n'}
    query type
      filter P*
         and { n' :- n' == n }
         min $ < P
          in s |-> [(_, (_, s_t))|_]
      | error $[Table [n] not created].

rules // column declarations

  declareCols maps declareCol(*, list(*))
  declareCol : scope * (string * COL)
  declareCol(s, (n, T)) :-
    // @n.type := T,
    s -> Col{n} with col T,
    Col{n} in s |-> [_]
    | error $[Multiple columns with name [n]].

  resolveCol: scope * string -> COL
  resolveCol(s, n) = T :- {n'}
    // @n.ref := n',
    col of Col{n} in s |-> [(_, (Col{n'}, T)) | _]
    | error $[No column with name [n]].
