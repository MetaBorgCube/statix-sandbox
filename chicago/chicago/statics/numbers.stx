module statics/numbers

imports statics/base
imports signatures/numbers-sig 

signature
  constructors
    FLOAT : TYPE

rules

  typeOfType(s, IntT()) = INT().
  
rules

  typeOfExp(s, Int(i)) = INT().
  
  typeOfExp(s, e@Min(e1)) = INT() :-
    typeOfExp(s, e1) == INT() | error $[integer expected]@e1,
    @e.type := INT().
    
  typeOfExp(s, e@Add(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT() | error $[integer expected]@e1,
    typeOfExp(s, e2) == INT() | error $[integer expected]@e2,
    @e.type := INT().
    
    
//  typeOfExp(s, Add(e1, e2)) = T3 :- {T1 T2}
//    typeOfExp(s, e1) == T1,
//    typeOfExp(s, e2) == T2,
//    lub(T1, T2) == T3.
//    
//  //binop : TYPE * TYPE -> TYPE 
//  
//  lub(INT(), INT()) = INT().
//  lub(INT(), FLOAT()) = FLOAT().
//  lub(FLOAT(), FLOAT()) = FLOAT().
  
    
  typeOfExp(s, e@Sub(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT() | error $[integer expected]@e1,
    typeOfExp(s, e2) == INT() | error $[integer expected]@e2,
    @e.type := INT().
    
  typeOfExp(s, e@Mul(e1, e2)) = INT() :-
    typeOfExp(s, e1) == INT() | error $[integer expected]@e1,
    typeOfExp(s, e2) == INT() | error $[integer expected]@e2,
    @e.type := INT().
    
  