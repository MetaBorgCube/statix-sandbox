module statics/function

imports statics/base
imports statics/variable 
imports signatures/function-sig

rules

  typeOfType(s, FunT(t1, t2)) = FUN(typeOfType(s, t1), typeOfType(s, t2)).
  
  subtype(FUN(T1, T2), FUN(S1, S2)) :- 
    subtype(S1, T1) | error $[function argument type should be contravariant],
    subtype(T2, S2) | error $[function return type should be covariant].
 
rules  // functions 
    
  typeOfExp(s, FunRT(x, t1, t2, e)) = FUN(T1, T2) :- {s_fun S}
    typeOfType(s, t1) == T1,
    typeOfType(s, t2) == T2,
    new s_fun, s_fun -P-> s,
    declareVar(s_fun, x, T1),
    typeOfExp(s_fun, e) == S,
    subtype(S, T2) | error $[[t2] expected as return type; [S] found]@t2.
    
  typeOfExp(s, Fun(x, t, e)) = FUN(T, S) :- {s_fun}
    typeOfType(s, t) == T,
    new s_fun, s_fun -P-> s,
    declareVar(s_fun, x, T),
    typeOfExp(s_fun, e) == S.
     
  typeOfExp(s, App(e1, e2)) = T2 :- {T1 S}
    typeOfExp(s, e1) == FUN(T1, T2) | error $[function expected]@e1,
    typeOfExp(s, e2) == S,
    subtype(S, T1) | error $[argument of type [T1] expected]@e2.

  typeOfExp(s, FunUT(x, e)) = FUN(T, S) :- {s_fun}
    new s_fun, 
    s_fun -P-> s,
    declareVar(s_fun, x, T),
    typeOfExp(s_fun, e) == S.