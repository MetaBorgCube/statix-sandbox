module statics/base

imports signatures/base-sig
    
rules // type of ...

  typeOfType : scope * Type -> TYPE
  typeOfExp  : scope * Exp  -> TYPE 
 
rules // well-typedness of ...

  declOk : scope * Decl 
  declsOk maps declOk(*, list(*))

  bindOk : scope * scope * Bind  
  bindsOk maps bindOk(*, *, list(*))
  
rules // operations on types

  subtype  : TYPE * TYPE
  equitype : TYPE * TYPE 
  lub      : TYPE * TYPE -> TYPE
  
  subtype(T, T).
  lub(T, T) = T.
  
  equitype(T, T).
  
rules

  proj : TYPE * ID -> TYPE
  
signature
  name-resolution
    labels P I R M
  relations 
    typeOfDecl : occurrence -> scope
    
signature
  relations 
    typeOf : -> TYPE
rules
  typeOf : scope -> TYPE
  typeOf(s) = T :-
    query typeOf
      filter e and true
      min /* */ and true
      in s |-> [(_, T)].
  withType : TYPE -> scope
  withType(T) = s :-
    new s, !typeOf[T] in s.
    